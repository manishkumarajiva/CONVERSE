const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const connectDB = require('../config/DBconnection.js');
const  { Server } = require('socket.io');

const port = normalizePort(process.env.PORT || 8000);
app.set('port', port);

const httpServer = http.createServer(app);
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);


const io = new Server(httpServer, {
  origin : "http://localhost:8000",
  credentials: true
})


io.on('connection', function(socket){

  socket.on('setup', function(userData){
    socket.join(userData._id);
    socket.emit('connected');
  })
  
})


function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  console.log('Server listening on ' + bind)
}
